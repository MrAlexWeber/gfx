// Generated by CoffeeScript 1.6.2
(function() {
  var $, animateHide, animatePosition, animateShow, defaults;

  $ = jQuery;

  if (!$.gfx) {
    throw new Error('GFX required');
  }

  defaults = {
    selector: '> *'
  };

  animatePosition = function(e, position) {
    var $element;

    $element = $(e.target);
    $element.gfx('animate', {
      translate3d: [position.left, position.top, 0]
    });
    return $element.gfx('queueNext', function() {
      return $element.gfx('transform', {
        translate3d: ''
      });
    });
  };

  animateShow = function(e) {
    var $element;

    $element = $(e.target);
    return $element.gfx('fadeIn');
  };

  animateHide = function(e) {
    var $element;

    $element = $(e.target);
    return $element.gfx('fadeOut');
  };

  $.gfx.fn.layoutPosition = function($clone) {
    var cLeft, cTop, left, top, _ref, _ref1;

    _ref = $clone.position(), cTop = _ref.cTop, cLeft = _ref.cLeft;
    _ref1 = this.position(), top = _ref1.top, left = _ref1.left;
    if (cLeft !== left || cTop !== top) {
      return this.trigger('position.layout.gfx', {
        left: cLeft - left,
        top: cTop - top
      });
    }
  };

  $.gfx.fn.layoutDisplay = function($clone) {
    var cDisplay, display;

    cDisplay = $clone.css('display');
    display = this.css('display');
    if (cDisplay === display) {
      return;
    }
    if (cDisplay === 'none') {
      return this.trigger('hide.layout.gfx');
    } else {
      return this.trigger('show.layout.gfx');
    }
  };

  $.gfx.fn.layout = function(options) {
    var $clone, $clones, $nodes;

    if (options == null) {
      options = {};
    }
    options = $.extend({}, defaults, options);
    $clone = options.clone || this.clone();
    if (options.className) {
      $clone.addClass(options.className);
    }
    $clone.css({
      position: 'absolute',
      left: -9999,
      top: -9999
    }).appendTo('body');
    this.on('position.layout.gfx', animatePosition);
    this.on('show.layout.gfx', animateShow);
    this.on('hide.layout.gfx', animateHide);
    $nodes = this.find(options.selector);
    $clones = $clone.find(options.selector);
    $nodes.each(function(index, node) {
      var $node;

      $node = $(node);
      $clone = $($clones.get(index));
      $node.gfx('layoutPosition', $clone);
      return $node.gfx('layoutDisplay', $clone);
    });
    $clone.remove();
    return this.off('layout.gfx');
  };

}).call(this);
