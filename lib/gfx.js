// Generated by CoffeeScript 1.6.2
(function() {
  var $, defaults, emulateTransitionEnd, n, prefix, rnumdeg, rnumpx, transformProperty, transformTypes, transformTypesDeg, transformTypesPx, vendor, vendorNames, _base,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $.gfx = {};

  $.gfx.fn = {};

  $.fn.gfx = function() {
    var args, method;

    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return $.gfx.fn[method].apply(this, args);
  };

  (_base = $.support).transition || (_base.transition = (function() {
    var style;

    style = (new Image).style;
    return 'transition' in style || 'webkitTransition' in style || 'MozTransition' in style || 'msTransition' in style;
  })());

  vendor = $.browser.mozilla ? 'moz' : void 0;

  vendor = $.browser.mozilla ? 'ms' : void 0;

  vendor || (vendor = 'webkit');

  prefix = "-" + vendor + "-";

  vendorNames = n = {
    transition: "" + prefix + "transition",
    transform: "" + prefix + "transform",
    transitionEnd: "" + vendor + "TransitionEnd"
  };

  defaults = {
    duration: 400,
    queue: true,
    easing: '',
    enabled: $.support.transition
  };

  transformTypes = ['scale', 'scaleX', 'scaleY', 'scale3d', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'rotate3d', 'translate', 'translateX', 'translateY', 'translateZ', 'translate3d', 'skew', 'skewX', 'skewY', 'matrix', 'matrix3d', 'perspective'];

  transformTypesPx = ['translate', 'translateX', 'translateY', 'translateZ', 'translate3d'];

  transformTypesDeg = ['rotate', 'rotateX', 'rotateY'];

  rnumpx = /^-?\d+(?:px)?$/i;

  rnumdeg = /^-?\d+(?:deg)?$/i;

  emulateTransitionEnd = function(duration) {
    var callback, called,
      _this = this;

    called = false;
    $(this).one(n.transitionEnd, function() {
      return called = true;
    });
    callback = function() {
      if (!called) {
        return $(_this).trigger(n.transitionEnd);
      }
    };
    return setTimeout(callback, duration);
  };

  transformProperty = function(key, values) {
    var i, value, _i, _len;

    values = $.makeArray(values);
    for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
      value = values[i];
      if (__indexOf.call(transformTypesPx, key) >= 0 && rnumpx.test(value)) {
        values[i] += 'px';
      }
      if (__indexOf.call(transformTypesDeg, key) >= 0 && rnumdeg.test(value)) {
        values[i] += 'deg';
      }
    }
    return values.join(',');
  };

  $.gfx.fn.redraw = function() {
    return this.each(function() {
      return this.offsetHeight;
    });
  };

  $.gfx.fn.queueNext = function(callback, type) {
    if (type == null) {
      type = 'fx';
    }
    return this.queue(function() {
      callback.apply(this, arguments);
      $(this).gfx('redraw');
      return jQuery.dequeue(this, type);
    });
  };

  $.gfx.fn.transform = function(properties, options) {
    var key, transforms, value;

    options = $.extend({}, defaults, options);
    if (!options.enabled) {
      return this;
    }
    transforms = [];
    for (key in properties) {
      value = properties[key];
      if (!(__indexOf.call(transformTypes, key) >= 0)) {
        continue;
      }
      value = transformProperty(key, value);
      transforms.push("" + key + "(" + value + ")");
      delete properties[key];
    }
    if (transforms.length) {
      properties[n.transform] = transforms.join(' ');
    }
    if (options.origin) {
      properties["" + prefix + "transform-origin"] = options.origin;
    }
    return this.css(properties);
  };

  $.gfx.fn.animate = function(properties, options) {
    var callback;

    options = $.extend({}, defaults, options);
    properties[n.transition] = "all " + options.duration + "ms " + options.easing;
    callback = function() {
      var _ref;

      $(this).css(n.transition, '');
      if ((_ref = options.complete) != null) {
        _ref.apply(this, arguments);
      }
      if (options.queue) {
        return $(this).dequeue();
      }
    };
    return this[options.queue === false ? 'each' : 'queue'](function() {
      if (options.enabled) {
        $(this).one(n.transitionEnd, callback);
        $(this).gfx('transform', properties);
        return emulateTransitionEnd.call(this, options.duration + 50);
      } else {
        $(this).gfx('transform', properties);
        return callback();
      }
    });
  };

}).call(this);
